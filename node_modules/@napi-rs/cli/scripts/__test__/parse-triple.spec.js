"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ava_1 = tslib_1.__importDefault(require("ava"));
const parse_triple_1 = require("../parse-triple");
const triples = [
    {
        name: 'x86_64-unknown-linux-musl',
        expected: {
            abi: 'musl',
            arch: 'x64',
            platform: 'linux',
            platformArchABI: 'linux-x64-musl',
            raw: 'x86_64-unknown-linux-musl',
        },
    },
    {
        name: 'x86_64-unknown-linux-gnu',
        expected: {
            abi: 'gnu',
            arch: 'x64',
            platform: 'linux',
            platformArchABI: 'linux-x64-gnu',
            raw: 'x86_64-unknown-linux-gnu',
        },
    },
    {
        name: 'x86_64-pc-windows-msvc',
        expected: {
            abi: 'msvc',
            arch: 'x64',
            platform: 'win32',
            platformArchABI: 'win32-x64-msvc',
            raw: 'x86_64-pc-windows-msvc',
        },
    },
    {
        name: 'x86_64-apple-darwin',
        expected: {
            abi: null,
            arch: 'x64',
            platform: 'darwin',
            platformArchABI: 'darwin-x64',
            raw: 'x86_64-apple-darwin',
        },
    },
    {
        name: 'i686-pc-windows-msvc',
        expected: {
            abi: 'msvc',
            arch: 'ia32',
            platform: 'win32',
            platformArchABI: 'win32-ia32-msvc',
            raw: 'i686-pc-windows-msvc',
        },
    },
    {
        name: 'x86_64-unknown-freebsd',
        expected: {
            abi: null,
            arch: 'x64',
            platform: 'freebsd',
            platformArchABI: 'freebsd-x64',
            raw: 'x86_64-unknown-freebsd',
        },
    },
    {
        name: 'aarch64-unknown-linux-gnu',
        expected: {
            abi: 'gnu',
            arch: 'arm64',
            platform: 'linux',
            platformArchABI: 'linux-arm64-gnu',
            raw: 'aarch64-unknown-linux-gnu',
        },
    },
    {
        name: 'aarch64-pc-windows-msvc',
        expected: {
            abi: 'msvc',
            arch: 'arm64',
            platform: 'win32',
            platformArchABI: 'win32-arm64-msvc',
            raw: 'aarch64-pc-windows-msvc',
        },
    },
    {
        name: 'armv7-unknown-linux-gnueabihf',
        expected: {
            abi: 'gnueabihf',
            arch: 'arm',
            platform: 'linux',
            platformArchABI: 'linux-arm-gnueabihf',
            raw: 'armv7-unknown-linux-gnueabihf',
        },
    },
];
for (const triple of triples) {
    ava_1.default(`should parse ${triple.name}`, (t) => {
        t.deepEqual(parse_triple_1.parseTriple(triple.name), triple.expected);
    });
}
ava_1.default('should parse default triple from rustup show active', (t) => {
    t.deepEqual(parse_triple_1.getDefaultTargetTriple(`x86_64-unknown-linux-gnu (directory override for '/home/runner/work/fast-escape/fast-escape')`), parse_triple_1.parseTriple('x86_64-unknown-linux-gnu'));
    t.deepEqual(parse_triple_1.getDefaultTargetTriple(`stable-x86_64-apple-darwin (default)`), parse_triple_1.parseTriple(`x86_64-apple-darwin`));
    t.deepEqual(parse_triple_1.getDefaultTargetTriple(`nightly-2020-08-29-x86_64-apple-darwin (default)`), parse_triple_1.parseTriple('x86_64-apple-darwin'));
});
//# sourceMappingURL=parse-triple.spec.js.map