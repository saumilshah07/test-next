"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NewProjectCommand = void 0;
const tslib_1 = require("tslib");
const fs_1 = require("fs");
const path_1 = require("path");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const clipanion_1 = require("clipanion");
const inquirer_1 = tslib_1.__importStar(require("inquirer"));
const create_npm_dir_1 = require("../create-npm-dir");
const debug_1 = require("../debug");
const parse_triple_1 = require("../parse-triple");
const cargo_1 = require("./cargo");
const cargo_config_1 = require("./cargo-config");
const ci_yml_1 = require("./ci-yml");
const indexjs_1 = require("./indexjs");
const lib_rs_1 = require("./lib-rs");
const npmignore_1 = require("./npmignore");
const package_1 = require("./package");
const NAME_PROMOTE_NAME = 'Package name';
const DIR_PROMOTE_NAME = 'Dir name';
const ENABLE_GITHUB_ACTIONS_PROMOTE_NAME = 'Enable github actions';
const debug = debug_1.debugFactory('create');
const BUILD_RS = `extern crate napi_build;

fn main() {
  napi_build::setup();
}
`;
const SupportedPlatforms = [
    'aarch64-apple-darwin',
    'aarch64-linux-android',
    'aarch64-unknown-linux-gnu',
    'armv7-unknown-linux-gnueabihf',
    'x86_64-apple-darwin',
    'x86_64-pc-windows-msvc',
    'x86_64-unknown-linux-gnu',
    'x86_64-unknown-linux-musl',
];
class NewProjectCommand extends clipanion_1.Command {
    constructor() {
        super(...arguments);
        this.dryRun = false;
    }
    execute() {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.getName();
            if (!this.dirname) {
                const [scope, name] = (_b = (_a = this.name) === null || _a === void 0 ? void 0 : _a.split('/')) !== null && _b !== void 0 ? _b : [];
                const defaultProjectDir = name !== null && name !== void 0 ? name : scope;
                const dirAnswer = yield inquirer_1.prompt({
                    type: 'input',
                    name: DIR_PROMOTE_NAME,
                    default: defaultProjectDir,
                });
                this.dirname = dirAnswer[DIR_PROMOTE_NAME];
            }
            if (!this.targets) {
                const { targets } = yield inquirer_1.default.prompt([
                    {
                        type: 'checkbox',
                        name: 'targets',
                        message: 'Choose targets you want to support',
                        default: parse_triple_1.DefaultPlatforms.map((p) => p.raw),
                        choices: SupportedPlatforms,
                    },
                ]);
                if (!targets.length) {
                    throw new TypeError('At least choose one target');
                }
                this.targets = targets;
            }
            if (this.enableGithubActions === undefined) {
                const answer = yield inquirer_1.default.prompt([
                    {
                        type: 'confirm',
                        name: ENABLE_GITHUB_ACTIONS_PROMOTE_NAME,
                        message: 'Enable github actions?',
                        default: true,
                        choices: SupportedPlatforms,
                    },
                ]);
                this.enableGithubActions = answer[ENABLE_GITHUB_ACTIONS_PROMOTE_NAME];
            }
            debug(`Running command: ${chalk_1.default.green('[${command}]')}`);
            if (!this.dryRun) {
                fs_1.mkdirSync(path_1.join(process.cwd(), this.dirname));
                fs_1.mkdirSync(path_1.join(process.cwd(), this.dirname, 'src'));
            }
            const [s, pkgName] = this.name.split('/');
            const binaryName = pkgName !== null && pkgName !== void 0 ? pkgName : s;
            this.writeFile('Cargo.toml', cargo_1.createCargoContent(this.name));
            this.writeFile('.npmignore', npmignore_1.NPMIgnoreFiles);
            this.writeFile('build.rs', BUILD_RS);
            this.writeFile('index.js', indexjs_1.createIndexJs(this.name, binaryName));
            this.writeFile('package.json', JSON.stringify(package_1.createPackageJson(this.name, binaryName, this.targets), null, 2));
            this.writeFile('src/lib.rs', lib_rs_1.LibRs);
            if (this.enableGithubActions) {
                const githubDir = path_1.join(process.cwd(), this.dirname, '.github');
                const workflowsDir = path_1.join(githubDir, 'workflows');
                if (!this.dryRun) {
                    fs_1.mkdirSync(githubDir);
                    fs_1.mkdirSync(workflowsDir);
                }
                this.writeFile(path_1.join('.github', 'workflows', 'CI.yml'), ci_yml_1.createGithubActionsCIYml(binaryName, this.targets));
            }
            yield create_npm_dir_1.CreateNpmDirCommand.create('package.json', path_1.join(process.cwd(), this.dirname), path_1.join(process.cwd(), this.dirname));
            const enableLinuxArm8 = this.targets.includes('aarch64-unknown-linux-gnu');
            const enableLinuxArm7 = this.targets.includes('armv7-unknown-linux-gnueabihf');
            const cargoConfig = cargo_config_1.createCargoConfig(enableLinuxArm7, enableLinuxArm8);
            if (cargoConfig.length) {
                const configDir = path_1.join(process.cwd(), this.dirname, '.config');
                if (!this.dryRun) {
                    fs_1.mkdirSync(configDir);
                    this.writeFile(path_1.join('.config', 'config.toml'), cargoConfig);
                }
            }
        });
    }
    writeFile(path, content) {
        const distDir = path_1.join(process.cwd(), this.dirname);
        this.context.stdout.write(chalk_1.default.green(`Writing ${chalk_1.default.blue(path)}\n`));
        if (!this.dryRun) {
            fs_1.writeFileSync(path_1.join(distDir, path), content);
        }
    }
    getName() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.name) {
                const nameAnswer = yield inquirer_1.prompt({
                    type: 'input',
                    name: NAME_PROMOTE_NAME,
                    suffix: ' (The name filed in your package.json)',
                });
                const name = nameAnswer[NAME_PROMOTE_NAME];
                if (!name) {
                    yield this.getName();
                }
                else {
                    this.name = name;
                }
            }
        });
    }
}
NewProjectCommand.usage = clipanion_1.Command.Usage({
    description: 'Create a new project from scratch',
});
tslib_1.__decorate([
    clipanion_1.Command.String({
        name: '-n,--name',
        required: false,
    }),
    tslib_1.__metadata("design:type", String)
], NewProjectCommand.prototype, "name", void 0);
tslib_1.__decorate([
    clipanion_1.Command.String({
        name: '-d,--dirname',
        required: false,
    }),
    tslib_1.__metadata("design:type", String)
], NewProjectCommand.prototype, "dirname", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Array('--targets,-t'),
    tslib_1.__metadata("design:type", Array)
], NewProjectCommand.prototype, "targets", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Boolean(`--dry-run`),
    tslib_1.__metadata("design:type", Object)
], NewProjectCommand.prototype, "dryRun", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Boolean(`--enable-github-actions`),
    tslib_1.__metadata("design:type", Boolean)
], NewProjectCommand.prototype, "enableGithubActions", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Path('new'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", Promise)
], NewProjectCommand.prototype, "execute", null);
exports.NewProjectCommand = NewProjectCommand;
//# sourceMappingURL=index.js.map