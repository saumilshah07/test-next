"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArtifactsCommand = void 0;
const tslib_1 = require("tslib");
const path_1 = require("path");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const clipanion_1 = require("clipanion");
const fdir_1 = require("fdir");
const consts_1 = require("./consts");
const debug_1 = require("./debug");
const utils_1 = require("./utils");
const debug = debug_1.debugFactory('artifacts');
class ArtifactsCommand extends clipanion_1.Command {
    constructor() {
        super(...arguments);
        this.sourceDir = 'artifacts';
        this.distDir = 'npm';
    }
    execute() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { platforms, binaryName, packageJsonPath } = consts_1.getNapiConfig(this.configFileName);
            const packageJsonDir = path_1.parse(packageJsonPath).dir;
            const sourceApi = new fdir_1.fdir()
                .withFullPaths()
                .crawl(path_1.join(process.cwd(), this.sourceDir));
            const distDirs = platforms.map((platform) => path_1.join(process.cwd(), this.distDir, platform.platformArchABI));
            yield sourceApi.withPromise().then((output) => Promise.all(output.map((filePath) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                debug(`Read [${chalk_1.default.yellowBright(filePath)}]`);
                const sourceContent = yield utils_1.readFileAsync(filePath);
                const parsedName = path_1.parse(filePath);
                const [_binaryName, platformArchABI] = parsedName.name.split('.');
                if (_binaryName !== binaryName) {
                    debug(`[${chalk_1.default.yellowBright(_binaryName)}] is not matched with [${chalk_1.default.greenBright(binaryName)}], skip`);
                }
                const dir = distDirs.find((dir) => dir.includes(platformArchABI));
                if (!dir) {
                    throw new TypeError(`No dist dir found for ${filePath}`);
                }
                const distFilePath = path_1.join(dir, parsedName.base);
                debug(`Write file content to [${chalk_1.default.yellowBright(distFilePath)}]`);
                yield utils_1.writeFileAsync(distFilePath, sourceContent);
                const distFilePathLocal = path_1.join(packageJsonDir, parsedName.base);
                debug(`Write file content to [${chalk_1.default.yellowBright(distFilePathLocal)}]`);
                yield utils_1.writeFileAsync(distFilePathLocal, sourceContent);
            }))));
        });
    }
}
ArtifactsCommand.usage = clipanion_1.Command.Usage({
    description: 'Copy artifacts from Github Actions into specified dir',
});
tslib_1.__decorate([
    clipanion_1.Command.String('-d,--dir'),
    tslib_1.__metadata("design:type", Object)
], ArtifactsCommand.prototype, "sourceDir", void 0);
tslib_1.__decorate([
    clipanion_1.Command.String('--dist'),
    tslib_1.__metadata("design:type", Object)
], ArtifactsCommand.prototype, "distDir", void 0);
tslib_1.__decorate([
    clipanion_1.Command.String('-c,--config'),
    tslib_1.__metadata("design:type", String)
], ArtifactsCommand.prototype, "configFileName", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Path('artifacts'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", Promise)
], ArtifactsCommand.prototype, "execute", null);
exports.ArtifactsCommand = ArtifactsCommand;
//# sourceMappingURL=artifacts.js.map