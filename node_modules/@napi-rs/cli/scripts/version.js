"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VersionCommand = void 0;
const tslib_1 = require("tslib");
const path_1 = require("path");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const clipanion_1 = require("clipanion");
const consts_1 = require("./consts");
const debug_1 = require("./debug");
const spawn_1 = require("./spawn");
const update_package_1 = require("./update-package");
const debug = debug_1.debugFactory('version');
class VersionCommand extends clipanion_1.Command {
    constructor() {
        super(...arguments);
        this.prefix = 'npm';
    }
    static updatePackageJson(prefix, configFileName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { version, platforms } = consts_1.getNapiConfig(configFileName);
            for (const platformDetail of platforms) {
                const pkgDir = path_1.join(process.cwd(), prefix, platformDetail.platformArchABI);
                debug(`Update version to ${chalk_1.default.greenBright(version)} in [${chalk_1.default.yellowBright(pkgDir)}]`);
                yield update_package_1.updatePackageJson(path_1.join(pkgDir, 'package.json'), {
                    version,
                });
            }
        });
    }
    execute() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield VersionCommand.updatePackageJson(this.prefix, this.configFileName);
            yield spawn_1.spawn('git add .');
        });
    }
}
VersionCommand.usage = clipanion_1.Command.Usage({
    description: 'Update versions in created npm dir',
});
tslib_1.__decorate([
    clipanion_1.Command.String(`-p,--prefix`),
    tslib_1.__metadata("design:type", Object)
], VersionCommand.prototype, "prefix", void 0);
tslib_1.__decorate([
    clipanion_1.Command.String('-c,--config'),
    tslib_1.__metadata("design:type", String)
], VersionCommand.prototype, "configFileName", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Path('version'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", Promise)
], VersionCommand.prototype, "execute", null);
exports.VersionCommand = VersionCommand;
//# sourceMappingURL=version.js.map