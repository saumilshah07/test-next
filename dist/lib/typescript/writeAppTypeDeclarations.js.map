{"version":3,"sources":["../../../lib/typescript/writeAppTypeDeclarations.ts"],"sourcesContent":["import { promises as fs } from 'fs'\nimport os from 'os'\nimport path from 'path'\nimport { fileExists } from '../file-exists'\n\nexport async function writeAppTypeDeclarations(\n  baseDir: string,\n  imageImportsEnabled: boolean\n): Promise<void> {\n  // Reference `next` types\n  const appTypeDeclarations = path.join(baseDir, 'next-env.d.ts')\n\n  const content =\n    '/// <reference types=\"next\" />' +\n    os.EOL +\n    '/// <reference types=\"next/types/global\" />' +\n    os.EOL +\n    (imageImportsEnabled\n      ? '/// <reference types=\"next/image-types/global\" />' + os.EOL\n      : '') +\n    os.EOL +\n    '// NOTE: This file should not be edited' +\n    os.EOL +\n    '// see https://nextjs.org/docs/basic-features/typescript for more information.' +\n    os.EOL\n\n  // Avoids a write for read-only filesystems\n  if (\n    (await fileExists(appTypeDeclarations)) &&\n    (await fs.readFile(appTypeDeclarations, 'utf8')) === content\n  ) {\n    return\n  }\n\n  await fs.writeFile(appTypeDeclarations, content)\n}\n"],"names":["writeAppTypeDeclarations","baseDir","imageImportsEnabled","appTypeDeclarations","join","content","EOL","readFile","writeFile"],"mappings":";;;;QAKsBA,wBAAwB,GAAxBA,wBAAwB;AALf,GAAI,CAAJ,GAAI;AACpB,GAAI,CAAJ,GAAI;AACF,GAAM,CAAN,KAAM;AACI,GAAgB,CAAhB,WAAgB;;;;;;eAErBA,wBAAwB,CAC5CC,OAAe,EACfC,mBAA4B,EACb,CAAC;IAChB,EAAyB,AAAzB,uBAAyB;IACzB,KAAK,CAACC,mBAAmB,GARV,KAAM,SAQYC,IAAI,CAACH,OAAO,EAAE,CAAe;IAE9D,KAAK,CAACI,OAAO,GACX,CAAgC,kCAZrB,GAAI,SAaZC,GAAG,GACN,CAA6C,+CAdlC,GAAI,SAeZA,GAAG,IACLJ,mBAAmB,GAChB,CAAmD,qDAjB5C,GAAI,SAiB8CI,GAAG,GAC5D,CAAE,KAlBK,GAAI,SAmBZA,GAAG,GACN,CAAyC,2CApB9B,GAAI,SAqBZA,GAAG,GACN,CAAgF,kFAtBrE,GAAI,SAuBZA,GAAG;IAER,EAA2C,AAA3C,yCAA2C;IAC3C,EAAE,EACC,KAAK,KAzBiB,WAAgB,aAyBrBH,mBAAmB,KACpC,KAAK,CA7BqB,GAAI,UA6BrBI,QAAQ,CAACJ,mBAAmB,EAAE,CAAM,WAAOE,OAAO,EAC5D,CAAC;QACD,MAAM;IACR,CAAC;IAED,KAAK,CAlCwB,GAAI,UAkCxBG,SAAS,CAACL,mBAAmB,EAAEE,OAAO;AACjD,CAAC"}