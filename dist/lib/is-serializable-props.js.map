{"version":3,"sources":["../../lib/is-serializable-props.ts"],"sourcesContent":["const regexpPlainIdentifier = /^[A-Za-z_$][A-Za-z0-9_$]*$/\n\nfunction getObjectClassLabel(value: any): string {\n  return Object.prototype.toString.call(value)\n}\n\nfunction isPlainObject(value: any): boolean {\n  if (getObjectClassLabel(value) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(value)\n  return prototype === null || prototype === Object.prototype\n}\n\nexport function isSerializableProps(\n  page: string,\n  method: string,\n  input: any\n): true {\n  if (!isPlainObject(input)) {\n    throw new SerializableError(\n      page,\n      method,\n      '',\n      `Props must be returned as a plain object from ${method}: \\`{ props: { ... } }\\` (received: \\`${getObjectClassLabel(\n        input\n      )}\\`).`\n    )\n  }\n\n  function visit(visited: Map<any, string>, value: any, path: string) {\n    if (visited.has(value)) {\n      throw new SerializableError(\n        page,\n        method,\n        path,\n        `Circular references cannot be expressed in JSON (references: \\`${\n          visited.get(value) || '(self)'\n        }\\`).`\n      )\n    }\n\n    visited.set(value, path)\n  }\n\n  function isSerializable(\n    refs: Map<any, string>,\n    value: any,\n    path: string\n  ): true {\n    const type = typeof value\n    if (\n      // `null` can be serialized, but not `undefined`.\n      value === null ||\n      // n.b. `bigint`, `function`, `symbol`, and `undefined` cannot be\n      // serialized.\n      //\n      // `object` is special-cased below, as it may represent `null`, an Array,\n      // a plain object, a class, et al.\n      type === 'boolean' ||\n      type === 'number' ||\n      type === 'string'\n    ) {\n      return true\n    }\n\n    if (type === 'undefined') {\n      throw new SerializableError(\n        page,\n        method,\n        path,\n        '`undefined` cannot be serialized as JSON. Please use `null` or omit this value.'\n      )\n    }\n\n    if (isPlainObject(value)) {\n      visit(refs, value, path)\n\n      if (\n        Object.entries(value).every(([key, nestedValue]) => {\n          const nextPath = regexpPlainIdentifier.test(key)\n            ? `${path}.${key}`\n            : `${path}[${JSON.stringify(key)}]`\n\n          const newRefs = new Map(refs)\n          return (\n            isSerializable(newRefs, key, nextPath) &&\n            isSerializable(newRefs, nestedValue, nextPath)\n          )\n        })\n      ) {\n        return true\n      }\n\n      throw new SerializableError(\n        page,\n        method,\n        path,\n        `invariant: Unknown error encountered in Object.`\n      )\n    }\n\n    if (Array.isArray(value)) {\n      visit(refs, value, path)\n\n      if (\n        value.every((nestedValue, index) => {\n          const newRefs = new Map(refs)\n          return isSerializable(newRefs, nestedValue, `${path}[${index}]`)\n        })\n      ) {\n        return true\n      }\n\n      throw new SerializableError(\n        page,\n        method,\n        path,\n        `invariant: Unknown error encountered in Array.`\n      )\n    }\n\n    // None of these can be expressed as JSON:\n    // const type: \"bigint\" | \"symbol\" | \"object\" | \"function\"\n    throw new SerializableError(\n      page,\n      method,\n      path,\n      '`' +\n        type +\n        '`' +\n        (type === 'object'\n          ? ` (\"${Object.prototype.toString.call(value)}\")`\n          : '') +\n        ' cannot be serialized as JSON. Please only return JSON serializable data types.'\n    )\n  }\n\n  return isSerializable(new Map(), input, '')\n}\n\nexport class SerializableError extends Error {\n  constructor(page: string, method: string, path: string, message: string) {\n    super(\n      path\n        ? `Error serializing \\`${path}\\` returned from \\`${method}\\` in \"${page}\".\\nReason: ${message}`\n        : `Error serializing props returned from \\`${method}\\` in \"${page}\".\\nReason: ${message}`\n    )\n  }\n}\n"],"names":["isSerializableProps","regexpPlainIdentifier","getObjectClassLabel","value","Object","prototype","toString","call","isPlainObject","getPrototypeOf","page","method","input","SerializableError","visit","visited","path","has","get","set","isSerializable","refs","type","entries","every","key","nestedValue","nextPath","test","JSON","stringify","newRefs","Map","Array","isArray","index","Error","message"],"mappings":"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"}