{"version":3,"sources":["../../../../telemetry/trace/report/index.ts"],"sourcesContent":["import { TARGET, SpanId } from '../shared'\nimport reportToConsole from './to-console'\nimport reportToZipkin from './to-zipkin'\nimport reportToJaeger from './to-jaeger'\nimport reportToTelemetry from './to-telemetry'\nimport reportToJson from './to-json'\n\ntype Reporter = {\n  flushAll: () => Promise<void> | void\n  report: (\n    spanName: string,\n    duration: number,\n    timestamp: number,\n    id: SpanId,\n    parentId?: SpanId,\n    attrs?: Object\n  ) => void\n}\n\nclass MultiReporter implements Reporter {\n  private reporters: Reporter[] = []\n\n  constructor(reporters: Reporter[]) {\n    this.reporters = reporters\n  }\n\n  async flushAll() {\n    await Promise.all(this.reporters.map((reporter) => reporter.flushAll()))\n  }\n\n  report(\n    spanName: string,\n    duration: number,\n    timestamp: number,\n    id: SpanId,\n    parentId?: SpanId,\n    attrs?: Object\n  ) {\n    this.reporters.forEach((reporter) =>\n      reporter.report(spanName, duration, timestamp, id, parentId, attrs)\n    )\n  }\n}\n\nconst target =\n  process.env.TRACE_TARGET && process.env.TRACE_TARGET in TARGET\n    ? TARGET[process.env.TRACE_TARGET as TARGET]\n    : TARGET.TELEMETRY\n\nif (process.env.TRACE_TARGET && !target) {\n  console.info(\n    'For TRACE_TARGET, please specify one of: CONSOLE, ZIPKIN, TELEMETRY'\n  )\n}\n\nlet traceTargetReporter: Reporter\n\nif (target === TARGET.CONSOLE) {\n  traceTargetReporter = reportToConsole\n} else if (target === TARGET.ZIPKIN) {\n  traceTargetReporter = reportToZipkin\n} else if (target === TARGET.JAEGER) {\n  traceTargetReporter = reportToJaeger\n} else {\n  traceTargetReporter = reportToTelemetry\n}\n\n// JSON is always reported to allow for diagnostics\nexport const reporter = new MultiReporter([reportToJson, traceTargetReporter])\n"],"names":["MultiReporter","reporters","flushAll","Promise","all","map","reporter","report","spanName","duration","timestamp","id","parentId","attrs","forEach","target","process","env","TRACE_TARGET","TELEMETRY","console","info","traceTargetReporter","CONSOLE","ZIPKIN","JAEGER","reportToJson"],"mappings":";;;;;AAA+B,GAAW,CAAX,OAAW;AACd,GAAc,CAAd,UAAc;AACf,GAAa,CAAb,SAAa;AACb,GAAa,CAAb,SAAa;AACV,GAAgB,CAAhB,YAAgB;AACrB,GAAW,CAAX,OAAW;;;;;;MAc9BA,aAAa;gBAGLC,SAAqB,CAAE,CAAC;QAHtC,IAuBC,CAtBSA,SAAS,GAAe,CAAC,CAAC;QAGhC,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC5B,CAAC;UAEKC,QAAQ,GAAG,CAAC;QAChB,KAAK,CAACC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,SAAS,CAACI,GAAG,EAAEC,QAAQ,GAAKA,QAAQ,CAACJ,QAAQ;;IACtE,CAAC;IAEDK,MAAM,CACJC,QAAgB,EAChBC,QAAgB,EAChBC,SAAiB,EACjBC,EAAU,EACVC,QAAiB,EACjBC,KAAc,EACd,CAAC;QACD,IAAI,CAACZ,SAAS,CAACa,OAAO,EAAER,QAAQ,GAC9BA,QAAQ,CAACC,MAAM,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,EAAE,EAAEC,QAAQ,EAAEC,KAAK;;IAEtE,CAAC;;AAGH,KAAK,CAACE,MAAM,GACVC,OAAO,CAACC,GAAG,CAACC,YAAY,IAAIF,OAAO,CAACC,GAAG,CAACC,YAAY,IA7CvB,OAAW,UAAX,OAAW,QA8C7BF,OAAO,CAACC,GAAG,CAACC,YAAY,IA9CN,OAAW,QA+C7BC,SAAS;AAEtB,EAAE,EAAEH,OAAO,CAACC,GAAG,CAACC,YAAY,KAAKH,MAAM,EAAE,CAAC;IACxCK,OAAO,CAACC,IAAI,CACV,CAAqE;AAEzE,CAAC;AAED,GAAG,CAACC,mBAAmB;AAEvB,EAAE,EAAEP,MAAM,KAzDqB,OAAW,QAyDpBQ,OAAO,EAAE,CAAC;IAC9BD,mBAAmB,GAzDO,UAAc;AA0D1C,CAAC,MAAM,EAAE,EAAEP,MAAM,KA3Dc,OAAW,QA2DbS,MAAM,EAAE,CAAC;IACpCF,mBAAmB,GA1DM,SAAa;AA2DxC,CAAC,MAAM,EAAE,EAAEP,MAAM,KA7Dc,OAAW,QA6DbU,MAAM,EAAE,CAAC;IACpCH,mBAAmB,GA3DM,SAAa;AA4DxC,CAAC,MAAM,CAAC;IACNA,mBAAmB,GA5DS,YAAgB;AA6D9C,CAAC;AAGM,KAAK,CAAChB,SAAQ,GAAG,GAAG,CAACN,aAAa,CAAC,CAAC0B;IA/DlB,OAAW;IA+DqBJ,mBAAmB;AAAA,CAAC;QAAhEhB,QAAQ,GAARA,SAAQ"}