{"version":3,"sources":["../../../../telemetry/trace/report/to-json.ts"],"sourcesContent":["import { randomBytes } from 'crypto'\nimport { batcher } from './to-zipkin'\nimport { traceGlobals } from '../shared'\nimport fs from 'fs'\nimport path from 'path'\n\nlet writeStream: fs.WriteStream\nlet traceId: string\nlet batch: ReturnType<typeof batcher> | undefined\n\nconst reportToLocalHost = (\n  name: string,\n  duration: number,\n  timestamp: number,\n  id: string,\n  parentId?: string,\n  attrs?: Object\n) => {\n  const distDir = traceGlobals.get('distDir')\n  if (!distDir) {\n    return\n  }\n\n  if (!traceId) {\n    traceId = process.env.TRACE_ID || randomBytes(8).toString('hex')\n  }\n\n  if (!batch) {\n    batch = batcher(async (events) => {\n      if (!writeStream) {\n        const tracesDir = path.join(distDir, 'traces')\n        await fs.promises.mkdir(tracesDir, { recursive: true })\n        const file = path.join(distDir, 'trace')\n        writeStream = fs.createWriteStream(file, {\n          flags: 'a',\n          encoding: 'utf8',\n        })\n      }\n      const eventsJson = JSON.stringify(events)\n      try {\n        await new Promise<void>((resolve, reject) => {\n          writeStream.write(eventsJson + '\\n', 'utf8', (err) => {\n            err ? reject(err) : resolve()\n          })\n        })\n      } catch (err) {\n        console.log(err)\n      }\n    })\n  }\n\n  batch.report({\n    traceId,\n    parentId,\n    name,\n    id,\n    timestamp,\n    duration,\n    tags: attrs,\n  })\n}\n\nexport default {\n  flushAll: () =>\n    batch\n      ? batch.flushAll().then(() => {\n          writeStream.end('', 'utf8')\n        })\n      : undefined,\n  report: reportToLocalHost,\n}\n"],"names":["writeStream","traceId","batch","reportToLocalHost","name","duration","timestamp","id","parentId","attrs","distDir","get","process","env","TRACE_ID","toString","events","tracesDir","join","promises","mkdir","recursive","file","createWriteStream","flags","encoding","eventsJson","JSON","stringify","Promise","resolve","reject","write","err","console","log","report","tags","flushAll","then","end","undefined"],"mappings":";;;;;AAA4B,GAAQ,CAAR,OAAQ;AACZ,GAAa,CAAb,SAAa;AACR,GAAW,CAAX,OAAW;AACzB,GAAI,CAAJ,GAAI;AACF,GAAM,CAAN,KAAM;;;;;;AAEvB,GAAG,CAACA,WAAW;AACf,GAAG,CAACC,OAAO;AACX,GAAG,CAACC,KAAK;AAET,KAAK,CAACC,iBAAiB,IACrBC,IAAY,EACZC,QAAgB,EAChBC,SAAiB,EACjBC,EAAU,EACVC,QAAiB,EACjBC,KAAc,GACX,CAAC;IACJ,KAAK,CAACC,OAAO,GAhBc,OAAW,cAgBTC,GAAG,CAAC,CAAS;IAC1C,EAAE,GAAGD,OAAO,EAAE,CAAC;QACb,MAAM;IACR,CAAC;IAED,EAAE,GAAGT,OAAO,EAAE,CAAC;QACbA,OAAO,GAAGW,OAAO,CAACC,GAAG,CAACC,QAAQ,QAxBN,OAAQ,cAwBc,CAAC,EAAEC,QAAQ,CAAC,CAAK;IACjE,CAAC;IAED,EAAE,GAAGb,KAAK,EAAE,CAAC;QACXA,KAAK,OA3Be,SAAa,iBA2BVc,MAAM,GAAK,CAAC;YACjC,EAAE,GAAGhB,WAAW,EAAE,CAAC;gBACjB,KAAK,CAACiB,SAAS,GA1BN,KAAM,SA0BQC,IAAI,CAACR,OAAO,EAAE,CAAQ;gBAC7C,KAAK,CA5BE,GAAI,SA4BFS,QAAQ,CAACC,KAAK,CAACH,SAAS,EAAE,CAAC;oBAACI,SAAS,EAAE,IAAI;gBAAC,CAAC;gBACtD,KAAK,CAACC,IAAI,GA5BD,KAAM,SA4BGJ,IAAI,CAACR,OAAO,EAAE,CAAO;gBACvCV,WAAW,GA9BJ,GAAI,SA8BMuB,iBAAiB,CAACD,IAAI,EAAE,CAAC;oBACxCE,KAAK,EAAE,CAAG;oBACVC,QAAQ,EAAE,CAAM;gBAClB,CAAC;YACH,CAAC;YACD,KAAK,CAACC,UAAU,GAAGC,IAAI,CAACC,SAAS,CAACZ,MAAM;YACxC,GAAG,CAAC,CAAC;gBACH,KAAK,CAAC,GAAG,CAACa,OAAO,EAAQC,OAAO,EAAEC,MAAM,GAAK,CAAC;oBAC5C/B,WAAW,CAACgC,KAAK,CAACN,UAAU,GAAG,CAAI,KAAE,CAAM,QAAGO,GAAG,GAAK,CAAC;wBACrDA,GAAG,GAAGF,MAAM,CAACE,GAAG,IAAIH,OAAO;oBAC7B,CAAC;gBACH,CAAC;YACH,CAAC,CAAC,KAAK,EAAEG,GAAG,EAAE,CAAC;gBACbC,OAAO,CAACC,GAAG,CAACF,GAAG;YACjB,CAAC;QACH,CAAC;IACH,CAAC;IAED/B,KAAK,CAACkC,MAAM,CAAC,CAAC;QACZnC,OAAO;QACPO,QAAQ;QACRJ,IAAI;QACJG,EAAE;QACFD,SAAS;QACTD,QAAQ;QACRgC,IAAI,EAAE5B,KAAK;IACb,CAAC;AACH,CAAC;eAEc,CAAC;IACd6B,QAAQ,MACNpC,KAAK,GACDA,KAAK,CAACoC,QAAQ,GAAGC,IAAI,KAAO,CAAC;YAC3BvC,WAAW,CAACwC,GAAG,CAAC,CAAE,GAAE,CAAM;QAC5B,CAAC,IACDC,SAAS;;IACfL,MAAM,EAAEjC,iBAAiB;AAC3B,CAAC"}