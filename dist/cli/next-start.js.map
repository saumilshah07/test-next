{"version":3,"sources":["../../cli/next-start.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { resolve } from 'path'\nimport arg from 'next/dist/compiled/arg/index.js'\nimport startServer from '../server/lib/start-server'\nimport { printAndExit } from '../server/lib/utils'\nimport { cliCommand } from '../bin/next'\nimport * as Log from '../build/output/log'\n\nconst nextStart: cliCommand = (argv) => {\n  const validArgs: arg.Spec = {\n    // Types\n    '--help': Boolean,\n    '--port': Number,\n    '--hostname': String,\n\n    // Aliases\n    '-h': '--help',\n    '-p': '--port',\n    '-H': '--hostname',\n  }\n  let args: arg.Result<arg.Spec>\n  try {\n    args = arg(validArgs, { argv })\n  } catch (error) {\n    if (error.code === 'ARG_UNKNOWN_OPTION') {\n      return printAndExit(error.message, 1)\n    }\n    throw error\n  }\n  if (args['--help']) {\n    console.log(`\n      Description\n        Starts the application in production mode.\n        The application should be compiled with \\`next build\\` first.\n\n      Usage\n        $ next start <dir> -p <port>\n\n      <dir> represents the directory of the Next.js application.\n      If no directory is provided, the current directory will be used.\n\n      Options\n        --port, -p      A port number on which to start the application\n        --hostname, -H  Hostname on which to start the application (default: 0.0.0.0)\n        --help, -h      Displays this message\n    `)\n    process.exit(0)\n  }\n\n  const dir = resolve(args._[0] || '.')\n  const port =\n    args['--port'] || (process.env.PORT && parseInt(process.env.PORT)) || 3000\n  const host = args['--hostname'] || '0.0.0.0'\n  const appUrl = `http://${host === '0.0.0.0' ? 'localhost' : host}:${port}`\n  startServer({ dir }, port, host)\n    .then(async (app) => {\n      Log.ready(`started server on ${host}:${port}, url: ${appUrl}`)\n      await app.prepare()\n    })\n    .catch((err) => {\n      console.error(err)\n      process.exit(1)\n    })\n}\n\nexport { nextStart }\n"],"names":["Log","nextStart","argv","validArgs","Boolean","Number","String","args","error","code","message","console","log","process","exit","dir","_","port","env","PORT","parseInt","host","appUrl","then","app","ready","prepare","catch","err"],"mappings":";;;;;;AAEwB,GAAM,CAAN,KAAM;AACd,GAAiC,CAAjC,QAAiC;AACzB,GAA4B,CAA5B,YAA4B;AACvB,GAAqB,CAArB,MAAqB;AAEtCA,GAAG,CAAHA,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEf,KAAK,CAACC,SAAS,IAAgBC,IAAI,GAAK,CAAC;IACvC,KAAK,CAACC,SAAS,GAAa,CAAC;QAC3B,EAAQ,AAAR,MAAQ;QACR,CAAQ,SAAEC,OAAO;QACjB,CAAQ,SAAEC,MAAM;QAChB,CAAY,aAAEC,MAAM;QAEpB,EAAU,AAAV,QAAU;QACV,CAAI,KAAE,CAAQ;QACd,CAAI,KAAE,CAAQ;QACd,CAAI,KAAE,CAAY;IACpB,CAAC;IACD,GAAG,CAACC,IAAI;IACR,GAAG,CAAC,CAAC;QACHA,IAAI,OApBQ,QAAiC,UAoBlCJ,SAAS,EAAE,CAAC;YAACD,IAAI;QAAC,CAAC;IAChC,CAAC,CAAC,KAAK,EAAEM,KAAK,EAAE,CAAC;QACf,EAAE,EAAEA,KAAK,CAACC,IAAI,KAAK,CAAoB,qBAAE,CAAC;YACxC,MAAM,KArBiB,MAAqB,eAqBxBD,KAAK,CAACE,OAAO,EAAE,CAAC;QACtC,CAAC;QACD,KAAK,CAACF,KAAK;IACb,CAAC;IACD,EAAE,EAAED,IAAI,CAAC,CAAQ,UAAG,CAAC;QACnBI,OAAO,CAACC,GAAG,EAAE,siBAeb;QACAC,OAAO,CAACC,IAAI,CAAC,CAAC;IAChB,CAAC;IAED,KAAK,CAACC,GAAG,OAhDa,KAAM,UAgDRR,IAAI,CAACS,CAAC,CAAC,CAAC,KAAK,CAAG;IACpC,KAAK,CAACC,IAAI,GACRV,IAAI,CAAC,CAAQ,YAAMM,OAAO,CAACK,GAAG,CAACC,IAAI,IAAIC,QAAQ,CAACP,OAAO,CAACK,GAAG,CAACC,IAAI,KAAM,IAAI;IAC5E,KAAK,CAACE,IAAI,GAAGd,IAAI,CAAC,CAAY,gBAAK,CAAS;IAC5C,KAAK,CAACe,MAAM,IAAI,OAAO,EAAED,IAAI,KAAK,CAAS,WAAG,CAAW,aAAGA,IAAI,CAAC,CAAC,EAAEJ,IAAI;QAlDlD,YAA4B,UAmDtC,CAAC;QAACF,GAAG;IAAC,CAAC,EAAEE,IAAI,EAAEI,IAAI,EAC5BE,IAAI,QAAQC,GAAG,GAAK,CAAC;QAjDdxB,GAAG,CAkDLyB,KAAK,EAAE,kBAAkB,EAAEJ,IAAI,CAAC,CAAC,EAAEJ,IAAI,CAAC,OAAO,EAAEK,MAAM;QAC3D,KAAK,CAACE,GAAG,CAACE,OAAO;IACnB,CAAC,EACAC,KAAK,EAAEC,GAAG,GAAK,CAAC;QACfjB,OAAO,CAACH,KAAK,CAACoB,GAAG;QACjBf,OAAO,CAACC,IAAI,CAAC,CAAC;IAChB,CAAC;AACL,CAAC;QAEQb,SAAS,GAATA,SAAS"}