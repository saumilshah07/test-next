{"version":3,"sources":["../../server/router.ts"],"sourcesContent":["import { IncomingMessage, ServerResponse } from 'http'\nimport { UrlWithParsedQuery } from 'url'\n\nimport pathMatch from '../shared/lib/router/utils/path-match'\nimport { removePathTrailingSlash } from '../client/normalize-trailing-slash'\nimport { normalizeLocalePath } from '../shared/lib/i18n/normalize-locale-path'\nimport { RouteHas } from '../lib/load-custom-routes'\nimport { matchHas } from '../shared/lib/router/utils/prepare-destination'\n\nexport const route = pathMatch()\n\nexport type Params = { [param: string]: any }\n\nexport type RouteMatch = (pathname: string | null | undefined) => false | Params\n\ntype RouteResult = {\n  finished: boolean\n  pathname?: string\n  query?: { [k: string]: string }\n}\n\nexport type Route = {\n  match: RouteMatch\n  has?: RouteHas[]\n  type: string\n  check?: boolean\n  statusCode?: number\n  name: string\n  requireBasePath?: false\n  internal?: true\n  fn: (\n    req: IncomingMessage,\n    res: ServerResponse,\n    params: Params,\n    parsedUrl: UrlWithParsedQuery\n  ) => Promise<RouteResult> | RouteResult\n}\n\nexport type DynamicRoutes = Array<{ page: string; match: RouteMatch }>\n\nexport type PageChecker = (pathname: string) => Promise<boolean>\n\nconst customRouteTypes = new Set(['rewrite', 'redirect', 'header'])\n\nfunction replaceBasePath(basePath: string, pathname: string) {\n  // If replace ends up replacing the full url it'll be `undefined`, meaning we have to default it to `/`\n  return pathname!.replace(basePath, '') || '/'\n}\n\nexport default class Router {\n  basePath: string\n  headers: Route[]\n  fsRoutes: Route[]\n  redirects: Route[]\n  rewrites: {\n    beforeFiles: Route[]\n    afterFiles: Route[]\n    fallback: Route[]\n  }\n  catchAllRoute: Route\n  pageChecker: PageChecker\n  dynamicRoutes: DynamicRoutes\n  useFileSystemPublicRoutes: boolean\n  locales: string[]\n\n  constructor({\n    basePath = '',\n    headers = [],\n    fsRoutes = [],\n    rewrites = {\n      beforeFiles: [],\n      afterFiles: [],\n      fallback: [],\n    },\n    redirects = [],\n    catchAllRoute,\n    dynamicRoutes = [],\n    pageChecker,\n    useFileSystemPublicRoutes,\n    locales = [],\n  }: {\n    basePath: string\n    headers: Route[]\n    fsRoutes: Route[]\n    rewrites: {\n      beforeFiles: Route[]\n      afterFiles: Route[]\n      fallback: Route[]\n    }\n    redirects: Route[]\n    catchAllRoute: Route\n    dynamicRoutes: DynamicRoutes | undefined\n    pageChecker: PageChecker\n    useFileSystemPublicRoutes: boolean\n    locales: string[]\n  }) {\n    this.basePath = basePath\n    this.headers = headers\n    this.fsRoutes = fsRoutes\n    this.rewrites = rewrites\n    this.redirects = redirects\n    this.pageChecker = pageChecker\n    this.catchAllRoute = catchAllRoute\n    this.dynamicRoutes = dynamicRoutes\n    this.useFileSystemPublicRoutes = useFileSystemPublicRoutes\n    this.locales = locales\n  }\n\n  setDynamicRoutes(routes: DynamicRoutes = []) {\n    this.dynamicRoutes = routes\n  }\n\n  addFsRoute(fsRoute: Route) {\n    this.fsRoutes.unshift(fsRoute)\n  }\n\n  async execute(\n    req: IncomingMessage,\n    res: ServerResponse,\n    parsedUrl: UrlWithParsedQuery\n  ): Promise<boolean> {\n    // memoize page check calls so we don't duplicate checks for pages\n    const pageChecks: { [name: string]: Promise<boolean> } = {}\n    const memoizedPageChecker = async (p: string): Promise<boolean> => {\n      p = normalizeLocalePath(p, this.locales).pathname\n\n      if (pageChecks[p]) {\n        return pageChecks[p]\n      }\n      const result = this.pageChecker(p)\n      pageChecks[p] = result\n      return result\n    }\n\n    let parsedUrlUpdated = parsedUrl\n\n    const applyCheckTrue = async (checkParsedUrl: UrlWithParsedQuery) => {\n      const originalFsPathname = checkParsedUrl.pathname\n      const fsPathname = replaceBasePath(this.basePath, originalFsPathname!)\n\n      for (const fsRoute of this.fsRoutes) {\n        const fsParams = fsRoute.match(fsPathname)\n\n        if (fsParams) {\n          checkParsedUrl.pathname = fsPathname\n\n          const fsResult = await fsRoute.fn(req, res, fsParams, checkParsedUrl)\n\n          if (fsResult.finished) {\n            return true\n          }\n\n          checkParsedUrl.pathname = originalFsPathname\n        }\n      }\n      let matchedPage = await memoizedPageChecker(fsPathname)\n\n      // If we didn't match a page check dynamic routes\n      if (!matchedPage) {\n        const normalizedFsPathname = normalizeLocalePath(\n          fsPathname,\n          this.locales\n        ).pathname\n\n        for (const dynamicRoute of this.dynamicRoutes) {\n          if (dynamicRoute.match(normalizedFsPathname)) {\n            matchedPage = true\n          }\n        }\n      }\n\n      // Matched a page or dynamic route so render it using catchAllRoute\n      if (matchedPage) {\n        const pageParams = this.catchAllRoute.match(checkParsedUrl.pathname)\n        checkParsedUrl.pathname = fsPathname\n        checkParsedUrl.query._nextBubbleNoFallback = '1'\n\n        const result = await this.catchAllRoute.fn(\n          req,\n          res,\n          pageParams as Params,\n          checkParsedUrl\n        )\n        return result.finished\n      }\n    }\n\n    /*\n      Desired routes order\n      - headers\n      - redirects\n      - Check filesystem (including pages), if nothing found continue\n      - User rewrites (checking filesystem and pages each match)\n    */\n\n    const allRoutes = [\n      ...this.headers,\n      ...this.redirects,\n      ...this.rewrites.beforeFiles,\n      ...this.fsRoutes,\n      // We only check the catch-all route if public page routes hasn't been\n      // disabled\n      ...(this.useFileSystemPublicRoutes\n        ? [\n            {\n              type: 'route',\n              name: 'page checker',\n              requireBasePath: false,\n              match: route('/:path*'),\n              fn: async (checkerReq, checkerRes, params, parsedCheckerUrl) => {\n                let { pathname } = parsedCheckerUrl\n                pathname = removePathTrailingSlash(pathname || '/')\n\n                if (!pathname) {\n                  return { finished: false }\n                }\n\n                if (await memoizedPageChecker(pathname)) {\n                  return this.catchAllRoute.fn(\n                    checkerReq,\n                    checkerRes,\n                    params,\n                    parsedCheckerUrl\n                  )\n                }\n                return { finished: false }\n              },\n            } as Route,\n          ]\n        : []),\n      ...this.rewrites.afterFiles,\n      ...(this.rewrites.fallback.length\n        ? [\n            {\n              type: 'route',\n              name: 'dynamic route/page check',\n              requireBasePath: false,\n              match: route('/:path*'),\n              fn: async (\n                _checkerReq,\n                _checkerRes,\n                _params,\n                parsedCheckerUrl\n              ) => {\n                return {\n                  finished: await applyCheckTrue(parsedCheckerUrl),\n                }\n              },\n            } as Route,\n            ...this.rewrites.fallback,\n          ]\n        : []),\n\n      // We only check the catch-all route if public page routes hasn't been\n      // disabled\n      ...(this.useFileSystemPublicRoutes ? [this.catchAllRoute] : []),\n    ]\n    const originallyHadBasePath =\n      !this.basePath || (req as any)._nextHadBasePath\n\n    for (const testRoute of allRoutes) {\n      // if basePath is being used, the basePath will still be included\n      // in the pathname here to allow custom-routes to require containing\n      // it or not, filesystem routes and pages must always include the basePath\n      // if it is set\n      let currentPathname = parsedUrlUpdated.pathname as string\n      const originalPathname = currentPathname\n      const requireBasePath = testRoute.requireBasePath !== false\n      const isCustomRoute = customRouteTypes.has(testRoute.type)\n      const isPublicFolderCatchall = testRoute.name === 'public folder catchall'\n      const keepBasePath = isCustomRoute || isPublicFolderCatchall\n      const keepLocale = isCustomRoute\n\n      const currentPathnameNoBasePath = replaceBasePath(\n        this.basePath,\n        currentPathname\n      )\n\n      if (!keepBasePath) {\n        currentPathname = currentPathnameNoBasePath\n      }\n\n      const localePathResult = normalizeLocalePath(\n        currentPathnameNoBasePath,\n        this.locales\n      )\n      const activeBasePath = keepBasePath ? this.basePath : ''\n\n      if (keepLocale) {\n        if (\n          !testRoute.internal &&\n          parsedUrl.query.__nextLocale &&\n          !localePathResult.detectedLocale\n        ) {\n          currentPathname = `${activeBasePath}/${parsedUrl.query.__nextLocale}${\n            currentPathnameNoBasePath === '/' ? '' : currentPathnameNoBasePath\n          }`\n        }\n\n        if (\n          (req as any).__nextHadTrailingSlash &&\n          !currentPathname.endsWith('/')\n        ) {\n          currentPathname += '/'\n        }\n      } else {\n        currentPathname = `${\n          (req as any)._nextHadBasePath ? activeBasePath : ''\n        }${\n          activeBasePath && localePathResult.pathname === '/'\n            ? ''\n            : localePathResult.pathname\n        }`\n      }\n\n      let newParams = testRoute.match(currentPathname)\n\n      if (testRoute.has && newParams) {\n        const hasParams = matchHas(req, testRoute.has, parsedUrlUpdated.query)\n\n        if (hasParams) {\n          Object.assign(newParams, hasParams)\n        } else {\n          newParams = false\n        }\n      }\n\n      // Check if the match function matched\n      if (newParams) {\n        // since we require basePath be present for non-custom-routes we\n        // 404 here when we matched an fs route\n        if (!keepBasePath) {\n          if (!originallyHadBasePath && !(req as any)._nextDidRewrite) {\n            if (requireBasePath) {\n              // consider this a non-match so the 404 renders\n              return false\n            }\n            // page checker occurs before rewrites so we need to continue\n            // to check those since they don't always require basePath\n            continue\n          }\n\n          parsedUrlUpdated.pathname = currentPathname\n        }\n\n        const result = await testRoute.fn(req, res, newParams, parsedUrlUpdated)\n\n        // The response was handled\n        if (result.finished) {\n          return true\n        }\n\n        // since the fs route didn't match we need to re-add the basePath\n        // to continue checking rewrites with the basePath present\n        if (!keepBasePath) {\n          parsedUrlUpdated.pathname = originalPathname\n        }\n\n        if (result.pathname) {\n          parsedUrlUpdated.pathname = result.pathname\n        }\n\n        if (result.query) {\n          parsedUrlUpdated.query = {\n            ...parsedUrlUpdated.query,\n            ...result.query,\n          }\n        }\n\n        // check filesystem\n        if (testRoute.check === true) {\n          if (await applyCheckTrue(parsedUrlUpdated)) {\n            return true\n          }\n        }\n      }\n    }\n    return false\n  }\n}\n"],"names":["route","customRouteTypes","Set","replaceBasePath","basePath","pathname","replace","Router","headers","fsRoutes","rewrites","beforeFiles","afterFiles","fallback","redirects","catchAllRoute","dynamicRoutes","pageChecker","useFileSystemPublicRoutes","locales","setDynamicRoutes","routes","addFsRoute","fsRoute","unshift","execute","req","res","parsedUrl","pageChecks","memoizedPageChecker","p","result","parsedUrlUpdated","applyCheckTrue","checkParsedUrl","originalFsPathname","fsPathname","fsParams","match","fsResult","fn","finished","matchedPage","normalizedFsPathname","dynamicRoute","pageParams","query","_nextBubbleNoFallback","allRoutes","type","name","requireBasePath","checkerReq","checkerRes","params","parsedCheckerUrl","length","_checkerReq","_checkerRes","_params","originallyHadBasePath","_nextHadBasePath","testRoute","currentPathname","originalPathname","isCustomRoute","has","isPublicFolderCatchall","keepBasePath","keepLocale","currentPathnameNoBasePath","localePathResult","activeBasePath","internal","__nextLocale","detectedLocale","__nextHadTrailingSlash","endsWith","newParams","hasParams","Object","assign","_nextDidRewrite","check"],"mappings":"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"}