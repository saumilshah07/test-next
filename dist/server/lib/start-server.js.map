{"version":3,"sources":["../../../server/lib/start-server.ts"],"sourcesContent":["import http from 'http'\nimport next from '../next'\n\nexport default async function start(\n  serverOptions: any,\n  port?: number,\n  hostname?: string\n) {\n  const app = next({\n    ...serverOptions,\n    customServer: false,\n  })\n  const srv = http.createServer(app.getRequestHandler())\n  await new Promise<void>((resolve, reject) => {\n    // This code catches EADDRINUSE error if the port is already in use\n    srv.on('error', reject)\n    srv.on('listening', () => resolve())\n    srv.listen(port, hostname)\n  })\n  // It's up to caller to run `app.prepare()`, so it can notify that the server\n  // is listening before starting any intensive operations.\n  return app\n}\n"],"names":["start","serverOptions","port","hostname","app","customServer","srv","createServer","getRequestHandler","Promise","resolve","reject","on","listen"],"mappings":";;;;kBAG8BA,KAAK;AAHlB,GAAM,CAAN,KAAM;AACN,GAAS,CAAT,KAAS;;;;;;eAEIA,KAAK,CACjCC,aAAkB,EAClBC,IAAa,EACbC,QAAiB,EACjB,CAAC;IACD,KAAK,CAACC,GAAG,OAPM,KAAS,UAOP,CAAC;WACbH,aAAa;QAChBI,YAAY,EAAE,KAAK;IACrB,CAAC;IACD,KAAK,CAACC,GAAG,GAZM,KAAM,SAYJC,YAAY,CAACH,GAAG,CAACI,iBAAiB;IACnD,KAAK,CAAC,GAAG,CAACC,OAAO,EAAQC,OAAO,EAAEC,MAAM,GAAK,CAAC;QAC5C,EAAmE,AAAnE,iEAAmE;QACnEL,GAAG,CAACM,EAAE,CAAC,CAAO,QAAED,MAAM;QACtBL,GAAG,CAACM,EAAE,CAAC,CAAW,gBAAQF,OAAO;;QACjCJ,GAAG,CAACO,MAAM,CAACX,IAAI,EAAEC,QAAQ;IAC3B,CAAC;IACD,EAA6E,AAA7E,2EAA6E;IAC7E,EAAyD,AAAzD,uDAAyD;IACzD,MAAM,CAACC,GAAG;AACZ,CAAC"}